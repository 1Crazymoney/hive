#pragma once
#include <steem/protocol/base.hpp>

#include <steem/chain/evaluator.hpp>

namespace steem { namespace plugins { namespace rc {

using steem::protocol::account_name_type;
using steem::protocol::asset;
using steem::protocol::asset_symbol_type;
using steem::protocol::extensions_type;

class rc_plugin;

/**
 * Delegate SP or a vesting SMT to a pool.
 *
 * The RC generated by the SP becomes an indel edge (indel = input to pool).
 * The delegated SP no longer generates RC for from_account, instead it generates
 * RC for to_pool.
 *
 * Each SMT delegated to an account forms its own pool.  Each account has only 3
 * slots for receiving delegation (`STEEM_RC_MAX_OUTDEL_SLOTS`).
 */
struct delegate_to_pool_operation : steem::protocol::base_operation
{
   account_name_type     from_account;
   account_name_type     to_pool;
   asset                 amount;

   extensions_type       extensions;

   void validate()const;
   void get_required_active_authorities( flat_set<account_name_type>& a )const { a.insert( from_account ); }
};

typedef fc::static_variant<
         delegate_to_pool_operation
      > rc_plugin_operation;

STEEM_DEFINE_PLUGIN_EVALUATOR( rc_plugin, rc_plugin_operation, delegate_to_pool );

} } } // steem::plugins::rc

FC_REFLECT( steem::plugins::rc::delegate_to_pool_operation,
   (from_account)
   (to_pool)
   (amount)
   (extensions)
   )

STEEM_DECLARE_OPERATION_TYPE( steem::plugins::rc::rc_plugin_operation )
FC_REFLECT_TYPENAME( steem::plugins::rc::rc_plugin_operation )
