stages:
- build
- test
- package
- data-supply
- deploy

variables:
  GIT_DEPTH: 1
  GIT_SUBMODULE_STRATEGY: recursive
  # pin to specific docker images for build repeatability
  RUNTIME_IMAGE_TAG: "@sha256:e1995e7b44d58436ce97fbcd28a5200d8e877f476c9c4bd3e1cc394c17be050b"
  BUILDER_IMAGE_TAG: "@sha256:13933b563395cc3c6ea8bcbd95b717eb4c9fcc33c4cd7194e620713aca03180d"
  TEST_IMAGE_TAG: "@sha256:fc78e92864645317c82c4703edd5b679c3d22c24bb7253612fb350b629681637"

custom_node_build:
  stage: build
  image: "$CI_REGISTRY_IMAGE/builder$BUILDER_IMAGE_TAG"
  variables:
    GIT_STRATEGY: fetch
  script:
    - chmod 777 ./ciscripts/custom_build.sh
    - ./ciscripts/custom_build.sh #It wont run untill you manually specify variables: LOW_MEMORY_NODE, CLEAR_VOTES and BUILD_HIVE_TESTNET
    - mkdir "$CI_JOB_NAME"
    - mv build/install-root "$CI_JOB_NAME"
    - mv contrib/hived.run "$CI_JOB_NAME"
    - mv $CONFIG_INI "$CI_JOB_NAME"
  when: manual
  allow_failure: false
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
    - "$CI_JOB_NAME"
    expire_in: 6 hours
  tags:
     - public-runner-docker
 
testnet_node_build:
  stage: build
  image: "$CI_REGISTRY_IMAGE/builder$BUILDER_IMAGE_TAG"
  script:
    # LOW_MEMORY=OFF CLEAR_VOTES=OFF TESTNET=ON
    - ./ciscripts/build.sh OFF OFF ON
    - mkdir -p "$CI_JOB_NAME"/tests/unit
    - mv build/install-root "$CI_JOB_NAME"
    - mv contrib/hived.run "$CI_JOB_NAME"
    - mv contrib/config-for-docker.ini "$CI_JOB_NAME"
    - mv build/tests/unit/chain_test build/tests/unit/plugin_test "$CI_JOB_NAME"/tests/unit
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
    - "$CI_JOB_NAME"
    expire_in: 6 hours
  when: manual
  allow_failure: false
  tags:
     - public-runner-docker

consensus_build:
  stage: build
  image: "$CI_REGISTRY_IMAGE/builder$BUILDER_IMAGE_TAG"
  script:
    # LOW_MEMORY=ON CLEAR_VOTES=ON TESTNET=OFF
    - ./ciscripts/build.sh ON ON OFF
    - mkdir "$CI_JOB_NAME"
    - mv build/install-root "$CI_JOB_NAME"
    - mv contrib/hived.run "$CI_JOB_NAME"
    - mv contrib/config-for-docker.ini "$CI_JOB_NAME"
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
    - "$CI_JOB_NAME"
    expire_in: 6 hours
  when: manual
  allow_failure: false
  tags:
    - public-runner-docker

chain_test:
  stage: test
  needs:
    - job: testnet_node_build
      artifacts: true
  image: "$CI_REGISTRY_IMAGE/runtime$RUNTIME_IMAGE_TAG"
  variables:
    GIT_STRATEGY: none
  script:
    - ./testnet_node_build/tests/unit/chain_test --log_format=JUNIT --log_sink=chain_test_results.xml --log_level=error > /dev/null 2>&1
  artifacts:
    reports:
      junit: chain_test_results.xml
    when: always
    expire_in: 6 months
  tags:
    - public-runner-docker

plugin_test:
  stage: test
  needs:
    - job: testnet_node_build
      artifacts: true
  image: "$CI_REGISTRY_IMAGE/runtime$RUNTIME_IMAGE_TAG"
  variables:
    GIT_STRATEGY: none
  script:
    # note: consider using --result_code=no to force exit code 0 even when tests fail because they currently fail and I want a nice green checkmark
    - ./testnet_node_build/tests/unit/plugin_test --log_format=JUNIT --log_sink=plugin_test_results.xml --log_level=error > /dev/null 2>&1
  artifacts:
    reports:
      junit: plugin_test_results.xml
    when: always
    expire_in: 6 months
  tags:
    - public-runner-docker

beem_tests:
  stage: test
  needs:
    - job: testnet_node_build
      artifacts: true
  image: "$CI_REGISTRY_IMAGE/test$TEST_IMAGE_TAG"
  variables:
    PYTHONPATH: $CI_PROJECT_DIR/tests/functional
  script:
    # boilerplate for installing latested beem
    - git clone --depth=1 --single-branch --branch dk-hybrid-operations https://gitlab.syncad.com/hive/beem.git
    - cd beem
    - python3 setup.py install --user
    - cd ..
    # stuff specific to this test
    - mkdir -p build/tests/hive-node-data
    - cd tests/functional/python_tests/dhf_tests
    - "python3 beem_dhf_tests.py initminer initminer 5JNHfZYKGaomSFvd4NUdQ9qMcEAC43kujbfjueTHpVapX1Kzq2n --run-hived $CI_PROJECT_DIR/testnet_node_build/install-root/bin/hived --working-dir=$CI_PROJECT_DIR/build/tests/hive-node-data --no-erase-proposal --junit-output=beem_dhf_test.xml"
    - cd ../hived
    - "python3 hived_hybrid_operations_test.py initminer 5JNHfZYKGaomSFvd4NUdQ9qMcEAC43kujbfjueTHpVapX1Kzq2n --run-hived $CI_PROJECT_DIR/testnet_node_build/install-root/bin/hived --working-dir=$CI_PROJECT_DIR/build/tests/hive-node-data"
  artifacts:
    paths:
    - tests/functional/python_tests/dhf_tests/beem_dhf_tests.log
    - tests/functional/python_tests/hived/hived_hybrid_operations_test.log
    reports:
      junit: tests/functional/python_tests/dhf_tests/beem_dhf_test.xml
    when: always
    expire_in: 6 months
  tags:
    - public-runner-docker

list_proposals_tests:
  stage: test
  needs:
    - job: testnet_node_build
      artifacts: true
  image: "$CI_REGISTRY_IMAGE/test$TEST_IMAGE_TAG"
  variables:
    PYTHONPATH: $CI_PROJECT_DIR/tests/functional
  script:
    # boilerplate for installing latested beem
    - git clone --depth=1 --single-branch --branch dk-hybrid-operations https://gitlab.syncad.com/hive/beem.git
    - cd beem
    - python3 setup.py install --user
    - cd ..
    # stuff specific to this test
    - mkdir -p build/tests/hive-node-data
    - cd tests/functional/python_tests/dhf_tests
    - "python3 list_proposals_tests.py initminer initminer 5JNHfZYKGaomSFvd4NUdQ9qMcEAC43kujbfjueTHpVapX1Kzq2n --run-hived $CI_PROJECT_DIR/testnet_node_build/install-root/bin/hived --working-dir=$CI_PROJECT_DIR/build/tests/hive-node-data --junit-output=list_proposals_tests.xml"
  artifacts:
    paths:
    - tests/functional/python_tests/dhf_tests/hdf_list_proposal.log
    reports:
      junit: tests/functional/python_tests/dhf_tests/list_proposals_tests.xml
    when: always
    expire_in: 6 months
  tags:
    - public-runner-docker

hived_options_tests:
  stage: test
  needs:
    - job: testnet_node_build
      artifacts: true
  image: "$CI_REGISTRY_IMAGE/test$TEST_IMAGE_TAG"
  variables:
    PYTHONPATH: $CI_PROJECT_DIR/tests/functional
  script:
    - cd tests/functional/python_tests/hived
    - "python3 hived_options_tests.py --run-hived $CI_PROJECT_DIR/testnet_node_build/install-root/bin/hived"
  tags:
    - public-runner-docker

package_consensus_node:
  stage: package
  needs:
    - job: consensus_build
      artifacts: true
  image: docker:19.03.11
  services:
    - docker:19.03.11-dind
  variables:
    DOCKER_BUILDKIT: 1
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: "/certs"
  script:
    - "docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY"
    - "docker build -f ciscripts/Dockerfile.ci --target=consensus_node --build-arg CI_REGISTRY_IMAGE=$CI_REGISTRY_IMAGE --build-arg RUNTIME_IMAGE_TAG=$RUNTIME_IMAGE_TAG --tag $CI_REGISTRY_IMAGE/consensus_node:$CI_COMMIT_SHORT_SHA ."
    - "docker push $CI_REGISTRY_IMAGE/consensus_node:$CI_COMMIT_SHORT_SHA"
    - "echo ===> the consensus node image for this build is: $CI_REGISTRY_IMAGE/consensus_node:$CI_COMMIT_SHORT_SHA"
  tags:
    - public-runner-docker
    
package_custom_node:
  stage: package
  needs:
    - job: custom_node_build
      artifacts: true
  image: docker:19.03.11
  services:
    - docker:19.03.11-dind
  variables:
    DOCKER_BUILDKIT: 1
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: "/certs"
  script:
    - "docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY"
    - "docker build -f ciscripts/Dockerfile.ci --target=custom_node --build-arg CI_REGISTRY_IMAGE=$CI_REGISTRY_IMAGE --build-arg RUNTIME_IMAGE_TAG=$RUNTIME_IMAGE_TAG --tag $CI_REGISTRY_IMAGE/custom_node:$CI_COMMIT_SHORT_SHA ."
    - "docker push $CI_REGISTRY_IMAGE/custom_node:$CI_COMMIT_SHORT_SHA"
    - "echo ===> the custom node image for this build is: $CI_REGISTRY_IMAGE/custom_node:$CI_COMMIT_SHORT_SHA"
  tags:
    - public-runner-docker
    
.sync_template: &sync
  stage: data-supply
  image: "$CI_REGISTRY_IMAGE/test$TEST_IMAGE_TAG"
  before_script:
  - echo "Blockchain will stop at $STOP_REPLAY_AT block"
  script:
    - mkdir -p ./sync/$CI_ENVIRONMENT_NAME/blockchain
    - cp ./$SOURCE_NODE/install-root/bin/hived ./sync/$CI_ENVIRONMENT_NAME
    - cp ./$SOURCE_NODE/install-root/bin/cli_wallet ./sync/$CI_ENVIRONMENT_NAME
    - $COPY_CONFIG
    - $RENAME_CONFIG
    - echo $CI_CONCURRENT_ID
    - echo "config.ini:"
    - cat ./sync/config.ini
    - cp ./$SOURCE_NODE/install-root/bin/truncate_block_log ./sync/$CI_ENVIRONMENT_NAME
    - ./sync/$CI_ENVIRONMENT_NAME/truncate_block_log /blockchain/block_log $CI_PROJECT_DIR/sync/blockchain/block_log $STOP_REPLAY_AT
    - chmod 0777 ./ciscripts/replay.sh
    - ./ciscripts/replay.sh "$STOP_REPLAY_AT" "$HTTP_ENDPOINT" "$WS_ENDPOINT"
  allow_failure: false
  artifacts:
    paths:
    - $CI_PROJECT_DIR/sync
    when: always
    expire_in: 6 months
  tags:
    - public-runner-docker
    - hived-for-tests

sync_production:
  variables:
    COPY_CONFIG: cp ./$SOURCE_NODE/config-for-docker.ini ./sync/$CI_ENVIRONMENT_NAME
    RENAME_CONFIG: mv ./sync/$CI_ENVIRONMENT_NAME/config-for-docker.ini ./sync/$CI_ENVIRONMENT_NAME/config.ini
    SOURCE_NODE: consensus_build
    GIT_STRATEGY: fetch
    STOP_REPLAY_AT: 5000000 #default value, its possible to set this variable before running job
  <<: *sync
  needs:
    - job: consensus_build
      artifacts: true
  tags:
    - public-runner-docker
    - hived-for-tests
  environment: production
  except:
    - schedules
    - master
    - merge_request
    - 0.24.0
    - development
  when: manual

custom_sync_production:
  variables:
    COPY_CONFIG: cp ./$SOURCE_NODE/CONFIG_INI ./sync/$CI_ENVIRONMENT_NAME
    RENAME_CONFIG: mv ./sync/$CI_ENVIRONMENT_NAME/CONFIG_INI ./sync/$CI_ENVIRONMENT_NAME/config.ini
    SOURCE_NODE: custom_node_build
    GIT_STRATEGY: fetch
    STOP_REPLAY_AT: 5000000 #default value, its possible to set this variable before running job
  <<: *sync
  needs:
    - job: custom_node_build
      artifacts: true
  tags:
    - public-runner-docker
    - hived-for-tests
  environment: production
  except:
    - schedules
    - master
    - merge_request
    - 0.24.0
    - development
  when: manual

sync_development:
  variables:
    COPY_CONFIG: cp ./$SOURCE_NODE/config-for-docker.ini ./sync/$CI_ENVIRONMENT_NAME
    RENAME_CONFIG: mv ./sync/$CI_ENVIRONMENT_NAME/config-for-docker.ini ./sync/$CI_ENVIRONMENT_NAME/config.ini
    SOURCE_NODE: consensus_build
    GIT_STRATEGY: fetch
    STOP_REPLAY_AT: 5000000 #default value, its possible to set this variable before running job
  <<: *sync
  needs:
    - job: consensus_build
      artifacts: true
  tags:
    - public-runner-docker
    - hived-for-tests
  environment: development
  only:
    - development
  when: manual

custom_sync_development:
  variables:
    COPY_CONFIG: cp ./$SOURCE_NODE/CONFIG_INI ./sync/$CI_ENVIRONMENT_NAME
    RENAME_CONFIG: mv ./sync/$CI_ENVIRONMENT_NAME/CONFIG_INI ./sync/$CI_ENVIRONMENT_NAME/config.ini
    SOURCE_NODE: custom_node_build
    GIT_STRATEGY: fetch
    STOP_REPLAY_AT: 5000000 #default value, its possible to set this variable before running job
  <<: *sync
  needs:
    - job: custom_node_build
      artifacts: true
  tags:
    - public-runner-docker
    - hived-for-tests
  environment: development
  only:
    - development
  when: manual

sync_staging:
  variables:
    COPY_CONFIG: cp ./$SOURCE_NODE/config-for-docker.ini ./sync/$CI_ENVIRONMENT_NAME
    RENAME_CONFIG: mv ./sync/$CI_ENVIRONMENT_NAME/config-for-docker.ini ./sync/$CI_ENVIRONMENT_NAME/config.ini
    SOURCE_NODE: consensus_build
    GIT_STRATEGY: fetch
    STOP_REPLAY_AT: 5000000 #default value, its possible to set this variable before running job
  <<: *sync
  needs:
    - job: consensus_build
      artifacts: true
  tags:
    - public-runner-docker
    - hived-for-tests
  environment: staging
  only:
    - master
    - merge_request
    - 0.24.0
  when: manual

custom_sync_staging:
  variables:
    COPY_CONFIG: cp ./$SOURCE_NODE/CONFIG_INI ./sync/$CI_ENVIRONMENT_NAME
    RENAME_CONFIG: mv ./sync/$CI_ENVIRONMENT_NAME/CONFIG_INI ./sync/$CI_ENVIRONMENT_NAME/config.ini
    SOURCE_NODE: custom_node_build
    GIT_STRATEGY: fetch
    STOP_REPLAY_AT: 5000000 #default value, its possible to set this variable before running job
  <<: *sync
  needs:
    - job: custom_node_build
      artifacts: true
  tags:
    - public-runner-docker
    - hived-for-tests
  environment: staging
  only:
    - master
    - merge_request
    - 0.24.0
  when: manual

#.deploy_template: &dep
#  stage: deploy
#  image: "$CI_REGISTRY_IMAGE/test$TEST_IMAGE_TAG"
#  variables:
#    GIT_STRATEGY: fetch
#    STOP_REPLAY_AT: 5000000 #default value, its possible to set this variable before running job
#    HTTP_ENDPOINT: 127.0.0.1:8090
#    WS_ENDPOINT: 127.0.0.1:8091
#  tags:
#    - public-runner-docker
#    - hived-for-tests
    
#deploy_production:
#  stage: deploy
#  image: "$CI_REGISTRY_IMAGE/test$TEST_IMAGE_TAG"
#  variables:
#    GIT_STRATEGY: fetch
#    STOP_REPLAY_AT: 5000000 #default value, its possible to set this variable before running job
#    HTTP_ENDPOINT: 127.0.0.1:10090
#    WS_ENDPOINT: 127.0.0.1:10091
#  needs:
#    - job: sync_production
#      artifacts: true
#  script:
#    - ./deploy.sh $STOP_REPLAY_AT $HTTP_ENDPOINT $WS_ENDPOINT
#  tags:
#    - public-runner-docker
#    - hived-for-tests
#  when: manual

#custom_deploy_production:
#  stage: deploy
#  image: "$CI_REGISTRY_IMAGE/test$TEST_IMAGE_TAG"
#  variables:
#    GIT_STRATEGY: fetch
#    STOP_REPLAY_AT: 5000000 #default value, its possible to set this variable before running job
#    HTTP_ENDPOINT: 127.0.0.1:10090
#    WS_ENDPOINT: 127.0.0.1:10091
#  needs:
#    - job: custom_sync_production
#      artifacts: true
#  script:
#    - ./deploy.sh $STOP_REPLAY_AT $HTTP_ENDPOINT $WS_ENDPOINT
#  tags:
#    - public-runner-docker
#    - hived-for-tests
#  when: manual
